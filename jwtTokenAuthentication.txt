As we know tokens are generic authentication credentials or authorization tokens used to authenticate users or authorize access to resources in web applications.

Tokens refer to a broad category of authentication credentials, whereas JWT is a specific format or implementation of tokens.

JWT (JSON Web Token)

• Definition: JWT is a specific type of token format defined by the JSON Web Token standard (RFC 7519). It is a compact and self-contained means of transmitting information between parties as a JSON object.

• Structure: JWTs consist of three parts: header, payload, and signature. They are typically encoded and signed using cryptographic algorithms.

• Usage: JWTs are commonly used for authentication and authorization in web applications and APIs. They can store user claims, such as user ID, roles, permissions, and custom data, in a secure and portable format.

• Statelessness: JWTs are stateless, meaning the server does not need to store session information. This makes them suitable for distributed architectures and scalable systems

JWT Structure-

A JWT is composed of three sections separated by dots (.), following the format header.payload.signature.

1. Header: Contains metadata about the type of token and the cryptographic algorithms used to secure it. It typically consists of two parts:

•Typ (Type): Specifies the type of token, usually set to "JWT".

Aig (Algorithm): Indicates the cryptographic algorithm used to sign the token, such as HMAC SHA256 or RSA.

2. Payload: Contains the claims or statements about the subject (user) and any additional data. It consists of a set of claims that represent assertions about the user, such as their identity, roles, or permissions. Claims are categorized into three types:

• Reserved Claims: Predefined claims standardized by the JWT specification, such as 165 (issuer), sub (subject), aud (audience), exp (expiration time), and fat (issued at).

• Public Claims: Custom claims defined by the application developer to convey information about the user

Private Claims Custom claims agreed upon by parties that exchange JWTs, not registered or standardized.

3 Signature. Verifies the integrity of the token and ensures that it has not been tampered with during transmission. It's created by taking the encoded header. encoded payload, a secret (for HMAC algorithms), and applying the specified algorithm te generate the signature


JWT Functions--

Certainly! In the context of JSON Web Tokens (JWT), jwt.sign() and jwt.verify() are two crucial functions provided by the jsonwebtoken library in Node.js. Here's what they do

jwt.sign():

• This function is used to generate a new JWT token based on the provided payload and options.

• It takes three parameters:

payload: This is the data you want to include in the token. It can be any JSON object containing user information, metadata, or any other relevant data

secretOrPrivateKey: This is the secret key used to sign the token. It can be a string or a buffer containing a secret cryptographic key

options(optional) : these are additional options that control the behavior of the token generation process, such as expiration time(expiresIn), algorithm(algorithm), and more.



jwt.verify():

• This function is used to verify and decode a JWT token to retrieve the original payload.

It takes three parameters:

 token: The JWT token to be verified.

 secret0rPublickey: The secret key or public key used to verify the token's signature. If the token was signed using a symmetric algorithm (e.g., HMAC), you need to provide the same secret key used to sign the token. If it was signed using an asymmetric algorithm (e.g., RSA), you need to provide the public key corresponding to the private key used for signing.

options (optional): Additional options for verification, such as algorithms (algorithms), audience (audience), issuer (issuer), and more. 



Our Hotel App Flow---

For the First Time, User is completely new to the site

1. Signup Route (/signup): This route will handle user registration and issue a JWT token upon successful registration.

2. Login Route (/login): This route will handle user login and issue a new JWT

token upon successful authentication.

3. Protected Routes: These routes will be accessed only by providing a valid JWT token.

install JWT----

First, you'll need to install the necessary packages for working with JWT. In Node.js, you can use packages like jsonwebtoken to generate and verify JWTs.

npm install jsonwebtoken

jwAuthMiddleware-
create a JWT Auth Middleware fxn, which is responsible for authentication via Tokens


• We can certainly change the variable name from reqfuser to req.EncodedData or any other name you prefer. The choice of variable name (EncodedData, userData, etc.) is flexible and depends on your application's conventions or requirements.

• The key aspect is to make sure that the decoded user information is attached to the request object (req) so that it can be easily accessed by other middleware functions or route handlers.


Important points:

When the server receives this request, it parses the Authorization header to extract the JWT token.

const authorizationHeader = 'Bearer

eyJhbGci0iJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY300kwIiwibmF tZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.Sf1KxwRJSMeKKF2QT4fwpMeJ f36P0k6yJV_adQssw5c';

const token authorizationHeader.split(' ')[1];

console.log(token); // Output:

eyJhbGc101JIUzI1NiIsInRSCCI6IkpXVC39.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmF tZS161kpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.Sf1KxwRJSMeKKF2QT4fwpMe3 +36P0k6yJV_adQssw5c

The split(' ') method separates the header value into an array of substrings using the space (' ') character as the delimiter. The [1] index accesses the second element of this array, which is the JWT token.

-

